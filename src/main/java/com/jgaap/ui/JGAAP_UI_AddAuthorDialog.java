/*
 * JGAAP -- a graphical program for stylometric authorship attribution
 * Copyright (C) 2009,2011 by Patrick Juola
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.jgaap.ui;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JGAAP_UI_AddAuthorDialog.java
 *
 * Created on Dec 3, 2010, 5:06:18 PM
 */

/**
 *
 * @author Patrick Brennan
 */
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.jgaap.backend.API;
import com.jgaap.util.Document;

public class JGAAP_UI_AddAuthorDialog extends javax.swing.JDialog {

	private static final long serialVersionUID = 1L;
	JFileChooser  FileChoser = null;
    API JGAAP_API = null;
    String Edit_AuthorName = "";
    String Filepath = "";
    List<Document> Edit_DocumentList = new ArrayList<Document>();
    List<Document> Edit_DocumentsToBeDeleted = new ArrayList<Document>();

    DefaultTableModel DocumentsTable_Model = new DefaultTableModel() {
    	private static final long serialVersionUID = 1L;
        @Override
        public boolean isCellEditable(int row, int column) {
            if (column == 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    };

    /** Creates new form JGAAP_UI_AddAuthorDialog */
    public JGAAP_UI_AddAuthorDialog(java.awt.Frame parent, boolean modal, String name, String filepath) {
        super(parent, modal);
        initComponents();
        JGAAP_API = API.getInstance();
        Edit_AuthorName = name;
        Filepath = filepath;
        SetUnknownDocumentColumns();
        if (!Edit_AuthorName.equalsIgnoreCase(""))
        {
            ConfigureWindowForEdit();
        }

        if (!Filepath.equalsIgnoreCase(""))
        {
            FileChoser = new JFileChooser(Filepath);
        }
        else
        {
            FileChoser = new JFileChooser("..");
        }
        FileChoser.setMultiSelectionEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        CancelButton = new javax.swing.JButton();
        OKButton = new javax.swing.JButton();
        AuthorTextField = new javax.swing.JTextField();
        AddDocumentsButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        RemoveDocumentsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DocumentsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        AddDocumentsButton.setText("Add Document");
        AddDocumentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDocumentsButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Author");

        RemoveDocumentsButton.setText("Remove Document");
        RemoveDocumentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveDocumentsButtonActionPerformed(evt);
            }
        });

        DocumentsTable.setModel(DocumentsTable_Model);
        DocumentsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        DocumentsTable.setColumnSelectionAllowed(true);
        DocumentsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(DocumentsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddDocumentsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemoveDocumentsButton))
                            .addComponent(AuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(OKButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveDocumentsButton)
                    .addComponent(AddDocumentsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelButton)
                    .addComponent(OKButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getFilePath()
    {
        return Filepath;
    }

    private void ConfigureWindowForEdit() {
        AuthorTextField.setText(Edit_AuthorName);
        Edit_DocumentList = JGAAP_API.getDocumentsByAuthor(Edit_AuthorName);
        for (int i = 0; i < Edit_DocumentList.size(); i++)
        {
            Object RowData[] = {Edit_DocumentList.get(i).getTitle(), Edit_DocumentList.get(i).getFilePath()};
            DocumentsTable_Model.addRow(RowData);
        }
}

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        setVisible(false);
        dispose();
}//GEN-LAST:event_CancelButtonActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed

        if (AuthorTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(JGAAP_UI_AddAuthorDialog.this, "You need to specify an author.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (DocumentsTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(JGAAP_UI_AddAuthorDialog.this, "You need to include documents.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (Edit_AuthorName.equalsIgnoreCase(""))
        {
            for (int i = 0; i < DocumentsTable.getRowCount(); i++) {
                try {
                    JGAAP_API.addDocument((String)DocumentsTable.getValueAt(i, 1), AuthorTextField.getText(), (String)DocumentsTable.getValueAt(i, 0));
                    
                } catch (Exception e) {
                	e.printStackTrace();
                }
            }
            setVisible(false);
            dispose();
        }
        else
        {
            for (int i = 0; i < DocumentsTable.getRowCount(); i++) {
                if (i < Edit_DocumentList.size())
                {
                    Edit_DocumentList.get(i).setAuthor(AuthorTextField.getText());
                    //System.out.print((String)DocumentsTable.getValueAt(i, 0));
                    Edit_DocumentList.get(i).setTitle((String)DocumentsTable.getValueAt(i, 0));
                }
                else
                {
                    try {
                        JGAAP_API.addDocument((String)DocumentsTable.getValueAt(i, 1), AuthorTextField.getText(), (String)DocumentsTable.getValueAt(i, 0));
                    } catch (Exception e) {
                    	e.printStackTrace();
                    }
                }
            }
            for (int i = Edit_DocumentsToBeDeleted.size() - 1; i >= 0; i--) {
                JGAAP_API.removeDocument(Edit_DocumentsToBeDeleted.get(i));
            }
            setVisible(false);
            dispose();
        }
}//GEN-LAST:event_OKButtonActionPerformed

    private void AddDocumentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDocumentsButtonActionPerformed

        int choice = FileChoser.showOpenDialog(JGAAP_UI_AddAuthorDialog.this);
        if (choice == JFileChooser.APPROVE_OPTION) {
            for(File file : FileChoser.getSelectedFiles()){
	        	try {
	                String filepath = file.getCanonicalPath();
	                String[] Split = filepath.split("[\\\\[\\/]]");
	                String Title = Split[Split.length - 1];
	                Object RowData[] = {Title, filepath};
	                DocumentsTable_Model.addRow(RowData);
	                Filepath = filepath;
	            } catch (Exception e) {
	            	e.printStackTrace(); 
	            }
            }
        }
}//GEN-LAST:event_AddDocumentsButtonActionPerformed

    private void RemoveDocumentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveDocumentsButtonActionPerformed
        if (Edit_AuthorName.equalsIgnoreCase(""))
        {
            DocumentsTable_Model.removeRow(DocumentsTable.getSelectedRow());
        }
        else
        {
            if (DocumentsTable.getSelectedRow() < (Edit_DocumentList.size()))
            {
                Edit_DocumentsToBeDeleted.add(Edit_DocumentList.get(DocumentsTable.getSelectedRow()));
                Edit_DocumentList.remove(DocumentsTable.getSelectedRow());
                DocumentsTable_Model.removeRow(DocumentsTable.getSelectedRow());
            }
            else
            {
                DocumentsTable_Model.removeRow(DocumentsTable.getSelectedRow());
            }
        }
}//GEN-LAST:event_RemoveDocumentsButtonActionPerformed

    private void SetUnknownDocumentColumns() {
        DocumentsTable_Model.addColumn("Title");
        DocumentsTable_Model.addColumn("Filepath");
        DocumentsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DocumentsTable.setColumnSelectionAllowed(false);
        DocumentsTable.setRowSelectionAllowed(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDocumentsButton;
    private javax.swing.JTextField AuthorTextField;
    private javax.swing.JButton CancelButton;
    private javax.swing.JTable DocumentsTable;
    private javax.swing.JButton OKButton;
    private javax.swing.JButton RemoveDocumentsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
